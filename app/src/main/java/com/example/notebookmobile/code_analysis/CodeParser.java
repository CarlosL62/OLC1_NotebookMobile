
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.notebookmobile.code_analysis;

import java_cup.runtime.*;
import java.util.*;
import com.example.notebookmobile.code_analysis.instructions.*;
import com.example.notebookmobile.code_analysis.expressions.*;
import com.example.notebookmobile.code_analysis.math_expressions.*;
import com.example.notebookmobile.code_analysis.utils.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CodeParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CodeParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CodeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CodeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\012\005\000\002\007\006\000\002\010\011\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\011\005\000\002" +
    "\005\003\000\002\005\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\014\003\015\014\016\015\012\016\011\021" +
    "\014\001\002\000\016\002\ufffc\003\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\021\ufffc\001\002\000\016\002\uffff\003\015\014" +
    "\016\015\012\016\011\021\014\001\002\000\016\002\ufff9" +
    "\003\ufff9\014\ufff9\015\ufff9\016\ufff9\021\ufff9\001\002\000" +
    "\004\002\000\001\002\000\016\002\ufffa\003\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\021\ufffa\001\002\000\004\011\062\001" +
    "\002\000\004\011\054\001\002\000\016\002\ufffb\003\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\021\ufffb\001\002\000\004\013" +
    "\052\001\002\000\004\002\ufffd\001\002\000\004\011\021" +
    "\001\002\000\004\002\020\001\002\000\004\002\001\001" +
    "\002\000\020\004\024\005\022\011\032\021\026\022\027" +
    "\025\023\026\030\001\002\000\016\004\024\005\022\011" +
    "\032\021\026\025\023\026\030\001\002\000\032\002\uffde" +
    "\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012" +
    "\uffde\014\uffde\015\uffde\016\uffde\021\uffde\001\002\000\016" +
    "\004\024\005\022\011\032\021\026\025\023\026\030\001" +
    "\002\000\004\012\047\001\002\000\032\002\uffdc\003\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\021\uffdc\001\002\000\004\012\uffe7" +
    "\001\002\000\032\002\uffdd\003\uffdd\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\010\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\021\uffdd\001\002\000\016\004\035\005\037\006\041\007" +
    "\036\010\040\012\uffe8\001\002\000\016\004\024\005\022" +
    "\011\032\021\026\025\023\026\030\001\002\000\016\004" +
    "\035\005\037\006\041\007\036\010\040\012\034\001\002" +
    "\000\032\002\uffe1\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\021\uffe1" +
    "\001\002\000\016\004\024\005\022\011\032\021\026\025" +
    "\023\026\030\001\002\000\016\004\024\005\022\011\032" +
    "\021\026\025\023\026\030\001\002\000\016\004\024\005" +
    "\022\011\032\021\026\025\023\026\030\001\002\000\016" +
    "\004\024\005\022\011\032\021\026\025\023\026\030\001" +
    "\002\000\016\004\024\005\022\011\032\021\026\025\023" +
    "\026\030\001\002\000\032\002\uffe3\003\uffe3\004\uffe3\005" +
    "\uffe3\006\uffe3\007\036\010\uffe3\012\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\021\uffe3\001\002\000\032\002\uffe4\003\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\036\010\uffe4\012\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\021\uffe4\001\002\000\032\002\uffe5\003" +
    "\uffe5\004\uffe5\005\uffe5\006\041\007\036\010\040\012\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\021\uffe5\001\002\000\032\002" +
    "\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\012\uffe2\014\uffe2\015\uffe2\016\uffe2\021\uffe2\001\002\000" +
    "\032\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006\041\007\036" +
    "\010\040\012\uffe6\014\uffe6\015\uffe6\016\uffe6\021\uffe6\001" +
    "\002\000\016\002\ufff7\003\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\021\ufff7\001\002\000\032\002\uffe0\003\uffe0\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\021\uffe0\001\002\000\032\002\uffdf\003\uffdf\004" +
    "\uffdf\005\uffdf\006\041\007\036\010\040\012\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\021\uffdf\001\002\000\016\004\024\005" +
    "\022\011\032\021\026\025\023\026\030\001\002\000\030" +
    "\002\ufff8\003\ufff8\004\035\005\037\006\041\007\036\010" +
    "\040\014\ufff8\015\ufff8\016\ufff8\021\ufff8\001\002\000\004" +
    "\023\055\001\002\000\004\026\056\001\002\000\004\020" +
    "\057\001\002\000\004\026\060\001\002\000\004\012\061" +
    "\001\002\000\016\002\ufff6\003\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\021\ufff6\001\002\000\004\024\063\001\002\000\016" +
    "\002\uffe9\003\uffe9\014\uffe9\015\uffe9\016\uffe9\021\uffe9\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\020\002\016\003\006\007\012\010\007\011" +
    "\005\012\003\013\004\001\001\000\002\001\001\000\016" +
    "\003\063\007\012\010\007\011\005\012\003\013\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\030\005\024\001" +
    "\001\000\004\004\050\001\001\000\002\001\001\000\004" +
    "\004\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\045\001\001\000\004\004\044\001\001\000\004" +
    "\004\043\001\001\000\004\004\042\001\001\000\004\004" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CodeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CodeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CodeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Fields
    CodeLexer lex;
    private List<String> syntaxErrors;
    private Analyzer analyzer;

    // Connect the parser with the lexer
    public CodeParser(CodeLexer lex, Analyzer analyzer){
        super(lex);
        this.analyzer = analyzer;
        this.syntaxErrors = new LinkedList<>();
    }


    // Getters
    public CodeLexer getLexer(){
        return this.lex;
    }
    public List<String> getSyntaxErrors() {
        if (this.syntaxErrors == null) {
            this.syntaxErrors = new LinkedList<>();
        }
        return this.syntaxErrors;
    }

    /* Overwrite error methods */
    public void syntax_error(Symbol cur_token) {
        StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
        mssBuilder.append(symbl_name_from_id(cur_token.sym));

        if(cur_token.value != null){
            mssBuilder.append(", lexema <");
            mssBuilder.append(cur_token.value.toString());
            mssBuilder.append(">");
        }
        mssBuilder.append(", linea: ");
        mssBuilder.append(cur_token.left);
        mssBuilder.append(", columna: ");
        mssBuilder.append(cur_token.right);

        if (expected_token_ids().isEmpty()) {
            mssBuilder.append(" -- ya no se esperaba ningun simbolo");
        } else {
            mssBuilder.append(" -- Se esperaba [");
            for (Integer expected_token_id : expected_token_ids()) {
                if(!symbl_name_from_id(expected_token_id).equals("error")){
                    mssBuilder.append(symbl_name_from_id(expected_token_id));
                    mssBuilder.append(" ");
                }

            }
            mssBuilder.append("]");
        }
        syntaxErrors.add(mssBuilder.toString());
    }

    public void report_error(String message, Object info){
        try{
            Symbol cur_token = (Symbol) info;
            StringBuilder mssBuilder = new StringBuilder("Simbolo: ");
            mssBuilder.append(symbl_name_from_id(cur_token.sym));
            mssBuilder.append(", linea: ");
            mssBuilder.append(cur_token.left);
            mssBuilder.append(", columna: ");
            mssBuilder.append(cur_token.right);
            if(cur_token != null){
                mssBuilder.append(", Lexema: ");
                mssBuilder.append(cur_token.value);
            }

            if(message != null){
                mssBuilder.append(", Info: ");
                mssBuilder.append(message);
            }

            syntaxErrors.add(mssBuilder.toString());
        } catch (Exception e){
            syntaxErrors.add(message);
        }
    }


    public void unrecovered_syntax_error(Symbol cur_token) {
        syntaxErrors.add("Errores de sintaxis severos detectados, revisa municiosamente el codigo");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CodeParser$actions {
  private final CodeParser parser;

  /** Constructor */
  CUP$CodeParser$actions(CodeParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CodeParser$do_action_part00000000(
    int                        CUP$CodeParser$act_num,
    java_cup.runtime.lr_parser CUP$CodeParser$parser,
    java.util.Stack            CUP$CodeParser$stack,
    int                        CUP$CodeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CodeParser$result;

      /* select the action based on the action number */
      switch (CUP$CodeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		RESULT = start_val;
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CodeParser$parser.done_parsing();
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= instructions 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		List<Instruction> list = (List<Instruction>)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
            if (list == null) {
                list = new LinkedList<>();
            }
            analyzer.execute(list);
        
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instruction 
            {
              List<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
            List<Instruction> list = new LinkedList<Instruction>();
            list.add(i);
            RESULT = list;
        
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instruction instructions 
            {
              List<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		List<Instruction> l = (List<Instruction>)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
            l.add(0, i);
            RESULT = l;
        
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instructions ::= error 
            {
              List<Instruction> RESULT =null;
		
            RESULT = null;
        
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= assignation 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = i; 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= print_function 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = i; 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= plot_function 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = i; 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= format_function 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = i; 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("instruction",9, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // assignation ::= ID EQUALS operable 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
            RESULT = new Assignation(i, e, new Position(ileft, iright));
        
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("assignation",8, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // print_function ::= PRINT LPAREN expression RPAREN 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		
            RESULT = new PrintFunction(e, new Position(pleft, pright));
        
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("print_function",5, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-3)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // plot_function ::= PLOT LPAREN MATH_FUNCTION FLOAT_LIT COMMA FLOAT_LIT RPAREN 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-3)).right;
		Float e1 = (Float)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Float e2 = (Float)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		

            RESULT = new PlotFunction(e, e1, e2, new Position(pleft, pright));
        
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("plot_function",6, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-6)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // math_expression ::= math_expression PLUS math_expression 
            {
              MathExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		MathExpression e1 = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		MathExpression e2 = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new OperationMathExp(
                    DefineOperation.PLUS,
                    e1, e2,
                    new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // math_expression ::= math_expression MINUS math_expression 
            {
              MathExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		MathExpression e1 = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		MathExpression e2 = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new OperationMathExp(
                    DefineOperation.MINUS,
                    e1, e2,
                    new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // math_expression ::= math_expression DIV math_expression 
            {
              MathExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		MathExpression e1 = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		MathExpression e2 = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new OperationMathExp(
                    DefineOperation.DIV,
                    e1, e2,
                    new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // math_expression ::= math_expression TIMES math_expression 
            {
              MathExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		MathExpression e1 = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		MathExpression e2 = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new OperationMathExp(
                    DefineOperation.TIMES,
                    e1, e2,
                    new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // math_expression ::= math_expression POWER math_expression 
            {
              MathExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		MathExpression e1 = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		MathExpression e2 = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new OperationMathExp(
                    DefineOperation.POWER,
                    e1, e2,
                    new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // math_expression ::= LPAREN 
            {
              MathExpression RESULT =null;
		
                RESULT = new LiteralMathExp("(");
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // math_expression ::= RPAREN 
            {
              MathExpression RESULT =null;
		
                RESULT = new LiteralMathExp(")");
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // math_expression ::= PLUS math_expression 
            {
              MathExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		MathExpression e = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new UnaryOperationMathExp(
                    DefineOperation.PLUS, e, new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // math_expression ::= MINUS math_expression 
            {
              MathExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		MathExpression e = (MathExpression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new UnaryOperationMathExp(
                    DefineOperation.MINUS, e, new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // math_expression ::= INTEGER_LIT 
            {
              MathExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new LiteralMathExp(l);
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // math_expression ::= FLOAT_LIT 
            {
              MathExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new LiteralMathExp(l);
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // math_expression ::= ID 
            {
              MathExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new VariableMathExp(i, new Position(ileft, iright));
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("math_expression",4, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // format_function ::= FORMAT LPAREN MATH_EXP 
            {
              Instruction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
            RESULT = new FormatFunction(s, new Position(fleft, fright));
        
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("format_function",7, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= operable 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= STRING_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new Literal(l); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operable ::= operable PLUS operable 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new Operation(
                    DefineOperation.PLUS,
                    e1, e2,
                    new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("operable",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operable ::= operable MINUS operable 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new Operation(
                    DefineOperation.MINUS,
                    e1, e2,
                    new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("operable",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operable ::= operable DIV operable 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new Operation(
                    DefineOperation.DIV,
                    e1, e2,
                    new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("operable",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operable ::= operable TIMES operable 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new Operation(
                    DefineOperation.TIMES,
                    e1, e2,
                    new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("operable",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operable ::= operable POWER operable 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new Operation(
                    DefineOperation.POWER,
                    e1, e2,
                    new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("operable",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operable ::= LPAREN operable RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		 RESULT = e; 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("operable",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operable ::= PLUS operable 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new UnaryOperation(
                    DefineOperation.PLUS, e, new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("operable",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operable ::= MINUS operable 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new UnaryOperation(
                    DefineOperation.MINUS, e, new Position(oleft, oright)
                );
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("operable",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.elementAt(CUP$CodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operable ::= INTEGER_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new Literal(l); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("operable",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operable ::= FLOAT_LIT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		 RESULT = new Literal(l); 
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("operable",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operable ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CodeParser$stack.peek()).value;
		
                RESULT = new VariableAccess(i, new Position(ileft, iright)) ;
            
              CUP$CodeParser$result = parser.getSymbolFactory().newSymbol("operable",2, ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodeParser$stack.peek()), RESULT);
            }
          return CUP$CodeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CodeParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CodeParser$do_action(
    int                        CUP$CodeParser$act_num,
    java_cup.runtime.lr_parser CUP$CodeParser$parser,
    java.util.Stack            CUP$CodeParser$stack,
    int                        CUP$CodeParser$top)
    throws java.lang.Exception
    {
              return CUP$CodeParser$do_action_part00000000(
                               CUP$CodeParser$act_num,
                               CUP$CodeParser$parser,
                               CUP$CodeParser$stack,
                               CUP$CodeParser$top);
    }
}

}
